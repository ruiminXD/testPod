#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AntiAddictionKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// AAKit 回调协议，回调接收方需遵循此协议。
SWIFT_PROTOCOL("_TtP16AntiAddictionKit21AntiAddictionCallback_")
@protocol AntiAddictionCallback
/// AAKit 回调方法
/// \param code 回调状态码
///
/// \param message 回调信息
///
- (void)onAntiAddictionResult:(NSInteger)code :(NSString * _Nonnull)message;
@end

@class Configuration;

SWIFT_CLASS_NAMED("AntiAddictionKit")
@interface AntiAddictionKit : NSObject
/// AAKit 配置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Configuration * _Nonnull configuration;)
+ (Configuration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setConfiguration:(Configuration * _Nonnull)value;
/// AAKit 配置方法
/// \param useSdkRealName 实名登记开关，默认值为 true
///
/// \param useSdkPaymentLimit 支付限制开关，默认值为 true
///
/// \param useSdkOnlineTimeLimit 在线时长限制开关，默认值为 true
///
+ (void)setFunctionConfig:(BOOL)useSdkRealName :(BOOL)useSdkPaymentLimit :(BOOL)useSdkOnlineTimeLimit;
/// 设置服务器地址，如果地址正确，则计时、实名、付费通过服务器统计；如果地址设置有误，则防沉迷都会失效。不设置，则默认开启本地防沉迷机制。
/// \param host 服务器根地址，例如 <code>https://gameapi.com</code>
///
+ (void)setHost:(NSString * _Nonnull)host;
/// AAKit 初始化方法
/// \param delegate 接受回调的对象
///
+ (void)init:(id <AntiAddictionCallback> _Nonnull)delegate SWIFT_METHOD_FAMILY(none);
/// 登录用户
/// \param userId 用户 id，不能为空
///
/// \param userType 用户类型
///
+ (void)login:(NSString * _Nonnull)userId :(NSInteger)userType;
/// 更新当前用户信息
/// \param userType 用户类型
///
+ (void)updateUserType:(NSInteger)userType;
/// 退出用户登录
+ (void)logout;
/// 获取用户类型
/// \param userId 用户 id
///
+ (NSInteger)getUserType:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 查询能否支付，直接返回支付限制相关回调类型 raw value，特殊情况使用
/// \param amount 支付金额，单位分
///
+ (NSInteger)checkCurrentPayLimit:(NSInteger)amount SWIFT_WARN_UNUSED_RESULT;
/// 查询能否支付
/// \param amount 支付金额，单位分
///
+ (void)checkPayLimit:(NSInteger)amount;
/// 设置已支付金额
/// \param amount 支付金额，单位分
///
+ (void)paySuccess:(NSInteger)amount;
/// 查询当前用户能否聊天
+ (void)checkChatLimit;
/// 打开实名窗口，实名结果通过回调接受
+ (void)openRealName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC16AntiAddictionKit10Appearance")
@interface Appearance : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// AAKit 功能配置
SWIFT_CLASS_NAMED("Configuration")
@interface Configuration : NSObject
/// AAKit 实名登记开关，默认值为 true
@property (nonatomic) BOOL useSdkRealName;
/// AAKit 在线时长限制开关，默认值为 true
@property (nonatomic) BOOL useSdkOnlineTimeLimit;
/// AAKit 支付限制开关，默认值为 true
@property (nonatomic) BOOL useSdkPaymentLimit;
/// AAKit 切换账号按钮是否显示
@property (nonatomic) BOOL showSwitchAccountButton;
/// 未成年人非节假日每日总时长 单位秒
@property (nonatomic) NSInteger minorCommonDayTotalTime;
/// 未成年人节假日每日总时长 单位秒
@property (nonatomic) NSInteger minorHolidayTotalTime;
/// 游客每日总时长（无节假日区分）单位秒
@property (nonatomic) NSInteger guestTotalTime;
/// 第一次提醒剩余游戏时间时的剩余时长 单位秒
@property (nonatomic) NSInteger firstAlertTipRemainTime;
/// 展示倒计时浮窗时的剩余时长 单位秒
@property (nonatomic) NSInteger countdownAlertTipRemainTime;
/// 宵禁开始时间（整数，小时，24小时进制，默认22）
@property (nonatomic) NSInteger curfewHourStart;
/// 宵禁结束时间（整数，小时，24小时进制，默认8）
@property (nonatomic) NSInteger curfewHourEnd;
/// 宵禁开始时间（字符串，格式为<code>小时:分钟</code>，24小时进制，默认<code>22:00</code>）方便配置具体到分钟
@property (nonatomic, copy) NSString * _Nonnull nightStrictStart;
/// 宵禁结束时间（整数，格式为<code>小时:分钟</code>，24小时进制，默认8）方便配置具体到分钟
@property (nonatomic, copy) NSString * _Nonnull nightStrictEnd;
/// 8-15岁单笔付费额度限制，单位分（默认5000分）
@property (nonatomic) NSInteger singlePaymentAmountLimitJunior;
/// 8-15岁每月总付费额度限制，单位分（默认20000分）
@property (nonatomic) NSInteger mouthTotalPaymentAmountLimitJunior;
/// 16-17岁单笔付费额度限制，单位分（默认10000分）
@property (nonatomic) NSInteger singlePaymentAmountLimitSenior;
/// 16-17岁每月总付费额度限制，单位分（默认40000分）
@property (nonatomic) NSInteger mouthTotalPaymentAmountLimitSenior;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AntiAddictionKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// AAKit 回调协议，回调接收方需遵循此协议。
SWIFT_PROTOCOL("_TtP16AntiAddictionKit21AntiAddictionCallback_")
@protocol AntiAddictionCallback
/// AAKit 回调方法
/// \param code 回调状态码
///
/// \param message 回调信息
///
- (void)onAntiAddictionResult:(NSInteger)code :(NSString * _Nonnull)message;
@end

@class Configuration;

SWIFT_CLASS_NAMED("AntiAddictionKit")
@interface AntiAddictionKit : NSObject
/// AAKit 配置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Configuration * _Nonnull configuration;)
+ (Configuration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setConfiguration:(Configuration * _Nonnull)value;
/// AAKit 配置方法
/// \param useSdkRealName 实名登记开关，默认值为 true
///
/// \param useSdkPaymentLimit 支付限制开关，默认值为 true
///
/// \param useSdkOnlineTimeLimit 在线时长限制开关，默认值为 true
///
+ (void)setFunctionConfig:(BOOL)useSdkRealName :(BOOL)useSdkPaymentLimit :(BOOL)useSdkOnlineTimeLimit;
/// 设置服务器地址，如果地址正确，则计时、实名、付费通过服务器统计；如果地址设置有误，则防沉迷都会失效。不设置，则默认开启本地防沉迷机制。
/// \param host 服务器根地址，例如 <code>https://gameapi.com</code>
///
+ (void)setHost:(NSString * _Nonnull)host;
/// AAKit 初始化方法
/// \param delegate 接受回调的对象
///
+ (void)init:(id <AntiAddictionCallback> _Nonnull)delegate SWIFT_METHOD_FAMILY(none);
/// 登录用户
/// \param userId 用户 id，不能为空
///
/// \param userType 用户类型
///
+ (void)login:(NSString * _Nonnull)userId :(NSInteger)userType;
/// 更新当前用户信息
/// \param userType 用户类型
///
+ (void)updateUserType:(NSInteger)userType;
/// 退出用户登录
+ (void)logout;
/// 获取用户类型
/// \param userId 用户 id
///
+ (NSInteger)getUserType:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 查询能否支付，直接返回支付限制相关回调类型 raw value，特殊情况使用
/// \param amount 支付金额，单位分
///
+ (NSInteger)checkCurrentPayLimit:(NSInteger)amount SWIFT_WARN_UNUSED_RESULT;
/// 查询能否支付
/// \param amount 支付金额，单位分
///
+ (void)checkPayLimit:(NSInteger)amount;
/// 设置已支付金额
/// \param amount 支付金额，单位分
///
+ (void)paySuccess:(NSInteger)amount;
/// 查询当前用户能否聊天
+ (void)checkChatLimit;
/// 打开实名窗口，实名结果通过回调接受
+ (void)openRealName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC16AntiAddictionKit10Appearance")
@interface Appearance : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// AAKit 功能配置
SWIFT_CLASS_NAMED("Configuration")
@interface Configuration : NSObject
/// AAKit 实名登记开关，默认值为 true
@property (nonatomic) BOOL useSdkRealName;
/// AAKit 在线时长限制开关，默认值为 true
@property (nonatomic) BOOL useSdkOnlineTimeLimit;
/// AAKit 支付限制开关，默认值为 true
@property (nonatomic) BOOL useSdkPaymentLimit;
/// AAKit 切换账号按钮是否显示
@property (nonatomic) BOOL showSwitchAccountButton;
/// 未成年人非节假日每日总时长 单位秒
@property (nonatomic) NSInteger minorCommonDayTotalTime;
/// 未成年人节假日每日总时长 单位秒
@property (nonatomic) NSInteger minorHolidayTotalTime;
/// 游客每日总时长（无节假日区分）单位秒
@property (nonatomic) NSInteger guestTotalTime;
/// 第一次提醒剩余游戏时间时的剩余时长 单位秒
@property (nonatomic) NSInteger firstAlertTipRemainTime;
/// 展示倒计时浮窗时的剩余时长 单位秒
@property (nonatomic) NSInteger countdownAlertTipRemainTime;
/// 宵禁开始时间（整数，小时，24小时进制，默认22）
@property (nonatomic) NSInteger curfewHourStart;
/// 宵禁结束时间（整数，小时，24小时进制，默认8）
@property (nonatomic) NSInteger curfewHourEnd;
/// 宵禁开始时间（字符串，格式为<code>小时:分钟</code>，24小时进制，默认<code>22:00</code>）方便配置具体到分钟
@property (nonatomic, copy) NSString * _Nonnull nightStrictStart;
/// 宵禁结束时间（整数，格式为<code>小时:分钟</code>，24小时进制，默认8）方便配置具体到分钟
@property (nonatomic, copy) NSString * _Nonnull nightStrictEnd;
/// 8-15岁单笔付费额度限制，单位分（默认5000分）
@property (nonatomic) NSInteger singlePaymentAmountLimitJunior;
/// 8-15岁每月总付费额度限制，单位分（默认20000分）
@property (nonatomic) NSInteger mouthTotalPaymentAmountLimitJunior;
/// 16-17岁单笔付费额度限制，单位分（默认10000分）
@property (nonatomic) NSInteger singlePaymentAmountLimitSenior;
/// 16-17岁每月总付费额度限制，单位分（默认40000分）
@property (nonatomic) NSInteger mouthTotalPaymentAmountLimitSenior;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
